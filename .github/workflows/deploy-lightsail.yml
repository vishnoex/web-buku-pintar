name: Deploy to AWS Lightsail

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: buku-pintar-web
  LIGHTSAIL_INSTANCE: vishnoex-2gb
  CONTAINER_PORT: 3003

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS credentials
      run: |
        aws sts get-caller-identity
        aws lightsail get-instances --query 'instances[0].name' --output text

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if not exists
      run: |
        if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} 2>/dev/null; then
          echo "Creating ECR repository..."
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}
        else
          echo "ECR repository already exists"
        fi

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building and pushing Docker image..."
        # Build the image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Verify ECR login
        echo "Verifying ECR login..."
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
        
        # Tag the image
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push with retry logic
        echo "Pushing image to ECR..."
        max_attempts=3
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          echo "Push attempt $attempt of $max_attempts"
          if docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG; then
            echo "Successfully pushed image with tag: $IMAGE_TAG"
            if docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest; then
              echo "Successfully pushed latest tag"
              break
            else
              echo "Failed to push latest tag"
            fi
          else
            echo "Failed to push image with tag: $IMAGE_TAG"
            if [ $attempt -eq $max_attempts ]; then
              echo "All push attempts failed"
              exit 1
            fi
            echo "Retrying in 5 seconds..."
            sleep 5
          fi
          attempt=$((attempt + 1))
        done

    # - name: Verify SSH Key and Instance Access
    #   run: |
    #     echo "Verifying SSH key..."
    #     # Save the SSH key to a file
    #     echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > lightsail_key.pem
    #     chmod 600 lightsail_key.pem
        
    #     # Get instance IP
    #     echo "Getting instance IP..."
    #     INSTANCE_IP=$(aws lightsail get-instance --instance-name ${{ env.LIGHTSAIL_INSTANCE }} --query 'instance.publicIpAddress' --output text)
    #     echo "Instance IP: $INSTANCE_IP"
        
    #     # Test SSH connection
    #     echo "Testing SSH connection..."
    #     if ssh -o StrictHostKeyChecking=no -i lightsail_key.pem ubuntu@$INSTANCE_IP "echo 'SSH connection successful'"; then
    #       echo "SSH key is valid and connection successful"
    #     else
    #       echo "SSH connection failed. Please check:"
    #       echo "1. The SSH key is correctly set in GitHub secrets"
    #       echo "2. The key is in the correct format (should be the private key)"
    #       echo "3. The key is added to the instance's authorized_keys"
    #       echo "4. The instance's security group allows SSH access (port 22)"
    #       exit 1
    #     fi
        
    #     # Clean up
    #     rm lightsail_key.pem

    - name: Verify SSH Key and Instance Access
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: 13.212.172.178
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: 30m
        script: | 
          echo "Nice Job!!!"

    - name: Deploy to Lightsail Instance
      run: |
        echo "Getting instance IP..."
        INSTANCE_IP=$(aws lightsail get-instance --instance-name ${{ env.LIGHTSAIL_INSTANCE }} --query 'instance.publicIpAddress' --output text)
        echo "Instance IP: $INSTANCE_IP"
        
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Logging into ECR..."
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
        
        echo "Pulling latest image..."
        docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        
        echo "Stopping existing container..."
        docker stop buku-pintar-web || true
        docker rm buku-pintar-web || true
        
        echo "Starting new container..."
        docker run -d \
          --name buku-pintar-web \
          -p ${{ env.CONTAINER_PORT }}:${{ env.CONTAINER_PORT }} \
          --restart unless-stopped \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        
        echo "Deployment completed successfully"
        EOF
        
        # Make the script executable
        chmod +x deploy.sh
        
        echo "Copying deployment script to instance..."
        scp -o StrictHostKeyChecking=no -i ${{ secrets.KEY }} deploy.sh ubuntu@$INSTANCE_IP:~/
        
        echo "Executing deployment script..."
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.KEY }} ubuntu@$INSTANCE_IP "sudo ./deploy.sh" 
