name: Deploy to AWS Lightsail

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: buku-pintar-web
  LIGHTSAIL_SERVICE: buku-pintar-web
  CONTAINER_PORT: 3003

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

    - name: Create Lightsail container service if not exists
      run: |
        if ! aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE }} 2>/dev/null; then
          aws lightsail create-container-service \
            --service-name ${{ env.LIGHTSAIL_SERVICE }} \
            --power small \
            --scale 1
          
          # Wait for the service to be ready
          echo "Waiting for container service to be ready..."
          while true; do
            STATUS=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE }} --query 'containerServices[0].state' --output text)
            if [ "$STATUS" = "RUNNING" ]; then
              break
            fi
            echo "Current status: $STATUS"
            sleep 30
          done
        fi

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to Lightsail
      run: |
        CONTAINERS=$(cat <<EOF
        {
          "web": {
            "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
            "ports": {
              "${{ env.CONTAINER_PORT }}": "HTTP"
            }
          }
        }
        EOF
        )
        
        PUBLIC_ENDPOINT=$(cat <<EOF
        {
          "containerName": "web",
          "containerPort": ${{ env.CONTAINER_PORT }},
          "healthCheck": {
            "healthyThreshold": 2,
            "unhealthyThreshold": 2,
            "timeoutSeconds": 2,
            "intervalSeconds": 5,
            "path": "/",
            "successCodes": "200-499"
          }
        }
        EOF
        )
        
        aws lightsail create-container-service-deployment \
          --service-name ${{ env.LIGHTSAIL_SERVICE }} \
          --containers "$CONTAINERS" \
          --public-endpoint "$PUBLIC_ENDPOINT" 
